function Pseudoobj () {}	Pseudoobj.prototype = { // –æ–±–æ–ª–æ—á–∫–∞ –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–∞
complete_test: function() {
		// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		// this.viewDir.œÜŒª0 - —Ç–æ—á–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ / —Ö—É–¥–æ–∂–Ω–∏–∫–∞
		// this.viewDir.œÜŒª1 - —Ü–µ–ª–µ–≤–æ–π / —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
		// this.viewDir.geoCalc.Œ± - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–∑–∏–º—É—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		// this.viewDir.geoCalc.Œîl_m - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
		// this.viewDir.Œ≤ - —É–≥–æ–ª –æ–±–∑–æ—Ä–∞
		// this.viewDir.geoCalc.Œ±1 - –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–∑–∏–º—É—Ç –æ–±–∑–æ—Ä–∞
		// this.viewDir.geoCalc.Œ±2 - –∫–æ–Ω–µ—á–Ω—ã–π –∞–∑–∏–º—É—Ç –æ–±–∑–æ—Ä–∞

		console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫ –∏ —É–≥–ª–∞ –æ–±–∑–æ—Ä–∞');
		console.log('–æ—Å–Ω–æ–≤–∞' , this.viewDir.œÜŒª0);
		console.log('—Ü–µ–Ω—Ç—Ä' , this.viewDir.œÜŒª1);
		console.log('–æ–±–∑–æ—Ä' , this.viewDir.Œ≤);
		console.log(this.p.geoCalc);

		L.popup().setLatLng(this.viewDir.œÜŒª0)
			.setContent("Œîl ‚âà" + (this.viewDir.geoCalc.Œîl_m ? this.viewDir.geoCalc.Œîl_m.toFixed(2) : null) + " –º,</br> ‚à° Œ±‚âà" + (this.viewDir.geoCalc.Œ± ? this.viewDir.geoCalc.Œ±.toFixed(3) : null) + "¬∞,</br> ‚èø Œ≤‚âà" + (this.viewDir.Œ≤ ? this.viewDir.Œ≤.toFixed(3) : null) + "</br>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: " + this.geo_Œ±(this.viewDir.geoCalc.Œ±))
			.openOn(this.map);
},
create: function (map) {
	this.map = map;
	this.p = {};
	this.point = {};
	this.point.dir = 's';
// –ù–ê–ß–ê–õ–û –§–†–ê–ì–ú–ï–ù–¢–ê –î–õ–Ø –í–°–¢–†–ê–ò–í–ê–ù–ò–Ø



	this.viewDir = {geoCalc: {}}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–∫—É—Ä—Å–∞ –∏ –æ–±–∑–æ—Ä–∞, –≤ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏
	this.direction_layers = {};
	this.dir = [ // –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ—Ä–æ–Ω —Å–≤–µ—Ç–∞ –ø–æ –¥–æ–ª—è–º –≤ 11,25¬∞ 8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
		'n', 'n',
		'ne', 'ne', 'ne', 'ne',
		'e', 'e', 'e', 'e',
		'se', 'se', 'se', 'se',
		's', 's', 's', 's',
		'sw', 'sw', 'sw', 'sw',
		'w', 'w', 'w', 'w',
		'nw', 'nw', 'nw', 'nw',
		'n', 'n'
	];
	/*	this.dir = [ // –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ—Ä–æ–Ω —Å–≤–µ—Ç–∞ –ø–æ –¥–æ–ª—è–º –≤ 11,25¬∞, –Ω–∞ 16 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
		'n', 'nne', 'nee', 'ne', 'ne', 'nee', 'nee', 'e',
		'e', 'see', 'see', 'se', 'se', 'sse', 'sse', 's',
		's', 'ssw', 'sww', 'sw', 'sw', 'sww', 'sww', 'w',
		'w', 'nww', 'nww', 'nw', 'nw', 'nnw', 'nnw', 'n'
	]; */
	this.dir_Œ± = { // Default Œ± for legacy directions
		null: null,
		n : 0.0,
		ne : 45.0,
		e : 90.0,
		se : 135.0,
		s : 180.0,
		sw : 225.0,
		w : 270.0,
		nw: 315.0,
		aero: NaN
	}
	this.marker_œÜŒª0_tooltip = '–≠—Ç–æ <b>—Ç–æ—á–∫–∞ —Å—ä—ë–º–∫–∏</b>,</br> –æ–±–æ–∑–Ω–∞—á–∞–µ–º–∞—è <b>œÜŒª‚ÇÄ</b></br>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏</br>–∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞';
	this.marker_œÜŒª0_tooltip2 = '–≠—Ç–æ <b>—Ç–æ—á–∫–∞ —Å—ä—ë–º–∫–∏</b>,</br> –æ–±–æ–∑–Ω–∞—á–∞–µ–º–∞—è <b>œÜŒª‚ÇÄ</b></br>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏</br>–∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≥–æ–ª –æ–±–∑–æ—Ä–∞';
	this.marker_œÜŒª1_tooltip = '–≠—Ç–æ <b>—Ç–æ—á–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –æ—Å–∏</b> –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è,</br> –æ–±–æ–∑–Ω–∞—á–∞–µ–º–∞—è <b>œÜŒª‚ÇÅ</b></br>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏</br> –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–≥–æ–ª –æ–±–∑–æ—Ä–∞';

	this.addTooltipDelayed(); // Extended functional for tooltips for the main points
	this.drawGeoSelectionLayers(); // By current state of object if loaded from DB

	this.map.addEventListener('click', this.onMapGeoSelectionClick, this);
	this.map.addEventListener('mousemove', this.onMapMouseMove, this);	
	},
	//// block of set functions for elements of image's geodesical data
	set_œÜŒª0 : function (œÜŒª0, stable) { // photographer's / artist point
		if (!œÜŒª0){
			this.viewDir.œÜŒª0 = null;
			this.viewDir.geoCalc = {};
			this.viewDir.geoCalc.œÜŒª0 = null;
			this.set_œÜŒª1(null);
			return;
		} else {
			this.viewDir.geoCalc.œÜŒª0 = œÜŒª0;
			if (stable)
				this.viewDir.œÜŒª0 = œÜŒª0;
			this.drawGeoSelectionLayers();
		}
	},
	set_œÜŒª1 : function (œÜŒª1, stable) { // point of object on geomertic center of the image
		if (!this.viewDir.œÜŒª0)
			return;
		if (!œÜŒª1){
			this.viewDir.œÜŒª1 = null;
			this.viewDir.geoCalc.œÜŒª1 = null;
			this.viewDir.geoCalc.Œîl_m = null; // Distance between points œÜŒª0 and œÜŒª1
			this.viewDir.geoCalc.Œ± = null;	// ¬∞, Geodezic azimuth from œÜŒª0 to œÜŒª1
			this.set_Œ≤(null);
			return;
		} else {
			this.viewDir.geoCalc.œÜŒª1 = œÜŒª1;
			if (stable)
				this.viewDir.œÜŒª1 = œÜŒª1;
			var rs = this.Œîl_azimut(this.viewDir.geoCalc.œÜŒª0, this.viewDir.geoCalc.œÜŒª1);
			this.viewDir.geoCalc.Œ± = rs.Œ±;
			this.viewDir.geoCalc.Œîl_m = rs.Œîl_m;
			this.drawGeoSelectionLayers();
		}
	},
	set_Œ≤ : function(Œ≤, stable) { // ¬∞, measure of observation
		if (!Œ≤){
			this.viewDir.Œ≤ = null;
			this.viewDir.geoCalc.Œ≤ = null;
			this.viewDir.geoCalc.Œ±0 = null;
			this.viewDir.geoCalc.Œ±1 = null;
			return;
		} else {
			this.viewDir.geoCalc.Œ≤ = Œ≤;
			if (stable)
				this.viewDir.Œ≤ = Œ≤;
			var ŒîŒ≤ = this.viewDir.Œ≤ / 2.0;
			this.viewDir.geoCalc.Œ±1 = (this.viewDir.geoCalc.Œ± - ŒîŒ≤);
			this.viewDir.geoCalc.Œ±2 = (this.viewDir.geoCalc.Œ± + ŒîŒ≤);
			this.drawGeoSelectionLayers();
		}
	},
	//// block for layers of elements of selection image's geodesical data
	draw_Layers_œÜŒª0 : function() {
		if (this.direction_layers.œÜŒª0)
			this.map.removeLayer(this.direction_layers.œÜŒª0);
		if (this.direction_layers.sector)
			this.map.removeLayer(this.direction_layers.sector);
		if (!this.viewDir.geoCalc.œÜŒª0)
			return;
		this.direction_layers.œÜŒª0 = L.marker(
			this.viewDir.œÜŒª0, {
				draggable: true,
//				title: this.title_œÜŒª0,
				icon: L.icon({
					iconSize: [26, 43],
					iconAnchor: [13, 36],
					iconUrl: 'pinEdit.png',
					className: 'pointMarkerEdit'
				})
			})
			.addEventListener('dragstart', this.dragStart_œÜŒª0, this)
			.addEventListener('dragend', this.dragEnd_œÜŒª0, this)
			.on('mouseover', function (e) {
				this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
			}, this)
			.on('mouseout', function (e) {
				this.map.addEventListener('mousemove', this.onMapMouseMove, this);
			}, this)
			.addEventListener('click', this.on_œÜŒª0_Click, this)
			.bindTooltipDelayed(this.viewDir.Œ≤ ? null : (!this.viewDir.œÜŒª1 ? this.marker_œÜŒª0_tooltip : this.marker_œÜŒª0_tooltip2))
			.addTo(this.map);
		if (this.point.dir){
			var Œ± = this.dir_Œ±[this.point.dir];
			if (!Œ±.isNaN && !this.direction_layers.old_dir)
				L.sector({
					center: this.viewDir.œÜŒª0,
					innerRadius: 2.0,
					outerRadius: 250.0,
					startBearing: Œ± - 15.0,
					endBearing :Œ± + 15.0,
					fill: true,
					fillColor:'#f754e1',
					fillOpacity: 0.2,
					color: '#f754e1',
					opacity: 0.4,
					weight: 1
				})
			.addTo(this.map);
		const R_m = 6371e3; // r ‚ôÅ
		function rad (x)
			{ return x * Math.PI/180; }
		var œÜ1 = rad (this.viewDir.œÜŒª0[0]);
		var Œª1 = rad (this.viewDir.œÜŒª0[1]);
		var Œ±_rd = rad (Œ±);
		var Œî_Œ∏ = 250.0 / R_m;
		var œÜ2 = Math.asin( Math.sin(œÜ1) * Math.cos(Œî_Œ∏) + Math.cos(œÜ1) * Math.sin(Œî_Œ∏) * Math.cos(Œ±_rd) );
		if (Math.abs(Math.cos(œÜ2)) < 0.001)
			var Œª2 = Œª1;
		else
			var Œª2 = ((Œª1 - Math.asin( Math.sin(Œ±_rd)* Math.sin(Œî_Œ∏) / Math.cos(œÜ1) ) + Math.PI ) % (2*Math.PI) ) - Math.PI;
		œÜ2 = œÜ2/Math.PI*180.0;
		Œª2 = Œª2/Math.PI*180.0;
			L.polyline(
				[this.viewDir.geoCalc.œÜŒª0, [œÜ2, Œª2]], {
					color: '#f754e1',
					weight: 2,
					dashArray: '5, 8'
				}
			)
			.addTo(this.map);
			this.direction_layers.old_dir = true;
		}
	},
	dragStart_œÜŒª0 : function (e) {
		console.log('grag start œÜŒª0');
		this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
		if (this.direction_layers.sector)
			this.map.removeLayer(this.direction_layers.sector);
		if (this.direction_layers.line_œÜŒª0_œÜŒª1)
			this.map.removeLayer(this.direction_layers.line_œÜŒª0_œÜŒª1);
		//if (this.direction_layers.œÜŒª1)			this.map.removeLayer(this.direction_layers.œÜŒª1);
	},
	dragEnd_œÜŒª0 : function (e) {
		console.log('grag end œÜŒª0');
		var ll = e.target.getLatLng();
		this.set_œÜŒª0([ll.lat, ll.lng], true);
		this.set_œÜŒª1(this.viewDir.œÜŒª1, true);
		this.set_Œ≤(this.viewDir.Œ≤, true);
		this.map.removeLayer(this.direction_layers.œÜŒª0);
		this.drawGeoSelectionLayers();
		this.map.addEventListener('mousemove', this.onMapMouseMove, this);
	},
	on_œÜŒª0_Click : function (e) {
		if (!this.viewDir.œÜŒª0)
			return;
		this.geoSelectionComplete();
	},
	draw_Layers_œÜŒª1 : function() {
		if (this.direction_layers.œÜŒª1){
			this.map.removeLayer(this.direction_layers.œÜŒª1);
			if (this.direction_layers.line_œÜŒª0_œÜŒª1)
				this.map.removeLayer(this.direction_layers.line_œÜŒª0_œÜŒª1);
		}
		if (!this.viewDir.geoCalc.œÜŒª1)
			return;
		this.direction_layers.œÜŒª1 = L.marker(
			this.viewDir.geoCalc.œÜŒª1, {
				draggable: true,
		//		title: this.title_œÜŒª1,
				icon: L.icon.glyph({
					prefix: '',
					cssClass:'sans-serif',
					glyph: 'ü†ù'
				})
			})
			.addEventListener('dragstart', this.dragStart_œÜŒª1, this)
			.addEventListener('dragend', this.dragEnd_œÜŒª1, this)
			.on('mouseover', function (e) {
				this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
			}, this)
			.on('mouseout', function (e) {
				this.map.addEventListener('mousemove', this.onMapMouseMove, this);
			}, this)
			.addEventListener('click', this.on_œÜŒª1_Click, this)
			.bindTooltipDelayed(this.marker_œÜŒª1_tooltip)
			.addTo(this.map);
		this.direction_layers.line_œÜŒª0_œÜŒª1 = L.polyline(
			[this.viewDir.geoCalc.œÜŒª0, this.viewDir.geoCalc.œÜŒª1], {
				draggable: true,
				color: '#FF0000',
				weight: 1
			}
		)
		.addEventListener('dragend', this.dragEnd_œÜŒª1, this)
		.addTo(this.map);
	},
	dragStart_œÜŒª1 : function (e) {
		console.log('grag start œÜŒª1');
		this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
		// this.map.removeLayer(this.direction_layers.œÜŒª0);
		this.map.removeLayer(this.direction_layers.line_œÜŒª0_œÜŒª1);
	},
	dragEnd_œÜŒª1 : function (e) {
		console.log('grag end œÜŒª1');
		var ll = e.target.getLatLng();
		this.set_œÜŒª1([ll.lat, ll.lng], true);
		this.drawGeoSelectionLayers();
		this.map.addEventListener('mousemove', this.onMapMouseMove, this);
	},
	on_œÜŒª1_Click : function (e) {
		var ll = e.target.getLatLng();
		this.set_œÜŒª1([ll.lat, ll.lng], true);
		if (!this.viewDir.œÜŒª1)
			return;
		this.geoSelectionComplete();
	},
	draw_Layers_Œ≤ : function() {
		if (this.direction_layers.sector){
			this.map.removeLayer(this.direction_layers.sector);
		}
		if (!this.viewDir.œÜŒª0 || !this.viewDir.geoCalc.Œ± || !this.viewDir.geoCalc.Œ≤)
			return;
		var ŒîŒ≤ = this.viewDir.geoCalc.Œ≤ / 2.0;
		this.viewDir.geoCalc.Œ±1 = (this.viewDir.geoCalc.Œ± - ŒîŒ≤);
		this.viewDir.geoCalc.Œ±2 = (this.viewDir.geoCalc.Œ± + ŒîŒ≤);
		if (ŒîŒ≤ > 180.0){
			this.viewDir.geoCalc.Œ±1 += 180.0;
			this.viewDir.geoCalc.Œ±2 -= 180.0;
		}
		this.direction_layers.sector = L.sector({
			center: this.viewDir.œÜŒª0,
			innerRadius: 2.0,
			outerRadius: this.viewDir.geoCalc.Œîl_m,
			startBearing: this.viewDir.geoCalc.Œ±1,
			endBearing :this.viewDir.geoCalc.Œ±2,
			fill: true,
			fillColor:'#aa0000',
			fillOpacity: 0.3,
			color: '#ff0000',
			opacity: 0.1,
			weight: 1
		})
		.addEventListener('dragend', this.dragEnd_Œ≤, this)
		.addTo(this.map);
	},
	dragStart_Œ≤ : function () {
		this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
		this.map.removeLayer(this.direction_layers.sector);
	},
	dragEnd_Œ≤ : function () {
		var ll = e.target.getLatLng();
		this.viewDir.Œ≤ = Math.abs(this.Œîl_azimut(this.viewDir.œÜŒª0, ll).Œ± - this.viewDir.geoCalc.Œ±) * 2.0;
		this.draw_Layers_Œ≤();
		this.map.addEventListener('mousemove', this.onMapMouseMove, this);
	},
	drawGeoSelectionLayers : function (){ // Full drawing function for the object of image geodesical data
		this.draw_Layers_œÜŒª0();
		this.draw_Layers_œÜŒª1();
		this.draw_Layers_Œ≤();
	},
	onMapGeoSelectionClick : function (e) {
		var œÜŒª = [e.latlng.lat, e.latlng.lng];
		if (!this.viewDir.œÜŒª0){
			this.set_œÜŒª0(œÜŒª, true);
			this.set_Œ≤(45.0, false);
		} else if (!this.viewDir.œÜŒª1) {
			this.set_œÜŒª1(œÜŒª, true);
		} else {
			var Œ≤ = Math.abs(this.Œîl_azimut(this.viewDir.œÜŒª0, œÜŒª).Œ± - this.viewDir.geoCalc.Œ±) * 2.0;
			this.set_Œ≤(Œ≤, true);
		}
		if (!this.viewDir.œÜŒª0)
			return;
		if (this.viewDir.Œ≤)
			this.geoSelectionComplete();
	},
	onMapMouseMove : function (e) {
		if (!this.viewDir.œÜŒª0)
			return;
		var œÜŒª = [e.latlng.lat, e.latlng.lng];
		if (!this.viewDir.œÜŒª1)
			this.set_œÜŒª1(œÜŒª, false);
		else {
			var Œ≤ = Math.abs(this.Œîl_azimut(this.viewDir.œÜŒª0, œÜŒª).Œ± - this.viewDir.geoCalc.Œ±) * 2.0;
			this.set_Œ≤(Œ≤, false);
		}
	},
	geoSelectionComplete : function (){
		this.map.removeEventListener('mousemove', this.onMapMouseMove, this);
		this.map.removeEventListener('click', this.onMapGeoSelectionClick, this);
		this.direction_layers.œÜŒª0.removeEventListener('dragstart', this.dragStart_œÜŒª0, this)
			.removeEventListener('dragend', this.dragEnd_œÜŒª0, this)
			.removeEventListener('mouseover')
			.removeEventListener('mouseout')
			.removeEventListener('click', this.on_œÜŒª0_Click, this);
		if (this.direction_layers.œÜŒª1){
			this.direction_layers.œÜŒª1.removeEventListener('dragstart', this.dragStart_œÜŒª1, this)
				.removeEventListener('dragend', this.dragEnd_œÜŒª1, this)
				.removeEventListener('mouseover')
				.removeEventListener('mouseout');
				this.map.removeLayer(this.direction_layers.œÜŒª1);
		}
		if (!this.viewDir.œÜŒª1 && this.direction_layers.line_œÜŒª0_œÜŒª1)
			this.map.removeLayer(this.direction_layers.line_œÜŒª0_œÜŒª1);
		if (!this.viewDir.Œ≤ && this.direction_layers.sector)
			this.map.removeLayer(this.direction_layers.sector);
		if (this.viewDir.œÜŒª0){
			this.direction_layers.œÜŒª0.remove();
			this.direction_layers.œÜŒª0.options.draggable = false;
			this.direction_layers.œÜŒª0.addTo(this.map);
		}
		if (!this.viewDir.œÜŒª1){
			this.viewDir.geoCalc.œÜŒª1 = null;
			this.viewDir.geoCalc.Œîl_m = null;
			this.viewDir.geoCalc.Œ± = null;
		}
		this.draw_Layers_Œ≤();
		delete this.viewDir.geoCalc.œÜŒª0;
		delete this.viewDir.geoCalc.œÜŒª1;
		delete this.viewDir.geoCalc.Œ≤;

		// Nomalize for geoJSON
		this.viewDir.type = 'LineString';
		this.viewDir.coordinates = [ this.viewDir.œÜŒª0, this.viewDir.œÜŒª1 ];
		this.viewDir.viewAngle = Math.floor(this.viewDir.Œ≤);

		this.viewField = this.direction_layers.sector.toGeoJSON();
		// L.extend(this.viewField.properties, sector_prop_additional_obj)
		this.complete_test(); // –£–î–ê–õ–ò–¢–¨ , –≠–¢–û –ö–û–ù–ï–¶ –ê–õ–ì–û–†–ò–¢–ú–ê
	},
	geo_Œ± : function (Œ±) { // –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∞–∑–∏–º—É—Ç–∞–ª—å–Ω–æ–≥–æ —É–≥–ª–∞
		return Œ± ? this.dir[Math.floor(Œ±/11.25)] : null;
	},
	Œîl_azimut : function (œÜŒª0, œÜŒª1) { // –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∑–∏–º—É—Ç–∞ –ª–∏–Ω–∏–∏ –∏–∑ —Ç–æ—á–∫–∏ 0 –≤ —Ç–æ—á–∫—É 1 –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
		function rad (x)
			{ return x * Math.PI/180; }
		var œÜ1 = rad (œÜŒª0[0]); var Œª1 = rad (œÜŒª0[1]);
		var œÜ2 = rad (œÜŒª1[0]); var Œª2 = rad (œÜŒª1[1]);
		var ŒîœÜ = rad (œÜŒª1[0]-œÜŒª0[0]);
		var ŒîŒª = rad (œÜŒª1[1]-œÜŒª0[1]);

		var a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
			Math.cos(œÜ1) * Math.cos(œÜ2) *
			Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
		var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		var y = Math.sin(Œª2-Œª1) * Math.cos(œÜ2);
		var x = Math.cos(œÜ1)*Math.sin(œÜ2) -
			Math.sin(œÜ1)*Math.cos(œÜ2)*Math.cos(Œª2-Œª1);
		var Œ∏ = Math.atan2(y, x);

		const R_m = 6371e3; // r ‚ôÅ
		return {
			Œîl_m: R_m * c,
			Œ±:(Œ∏*180/Math.PI + 360) % 360 // ¬∞
		};
	},
	addTooltipDelayed: function () { // include delayed tooltips
	L.Layer.include({

		showDelay: 1000,
		hideDelay: 100,

		bindTooltipDelayed: function (content, options) {
	
				if (content instanceof L.Tooltip) {
					 L.setOptions(content, options);
					 this._tooltip = content;
					 content._source = this;
				} else {
					 if (!this._tooltip || options) {
						this._tooltip = new L.Tooltip(options, this);
					 }
					 this._tooltip.setContent(content);
	
				}
	
				this._initTooltipInteractionsDelayed();
	
				if (this._tooltip.options.permanent && this._map && this._map.hasLayer(this)) {
					 this.openTooltipWithDelay();
				}
	
				return this;
		},
	
		_openTooltipDelayed: function (e) {
				var layer = e.layer || e.target;
	
				if (!this._tooltip || !this._map) {
					 return;
				}
				this.openTooltipWithDelay(layer, this._tooltip.options.sticky ? e.latlng : undefined);
		},
	
		openTooltipDelayed: function (layer, latlng) {
				if (!(layer instanceof L.Layer)) {
					 latlng = layer;
					 layer = this;
				}
				if (layer instanceof L.FeatureGroup) {
					 for (var id in this._layers) {
						layer = this._layers[id];
						break;
					 }
				}
				if (!latlng) {
					 latlng = layer.getCenter ? layer.getCenter() : layer.getLatLng();
				}
				if (this._tooltip && this._map) {
					 this._tooltip._source = layer;
					 this._tooltip.update();
					 this._map.openTooltip(this._tooltip, latlng);
					 if (this._tooltip.options.interactive && this._tooltip._container) {
						addClass(this._tooltip._container, 'leaflet-clickable');
						this.addInteractiveTarget(this._tooltip._container);
					 }
				}
				if (typeof lastMouseEvent != 'undefined')
					layer.fireEvent('mousemove', lastMouseEvent);
	
				return this;
		},
		openTooltipWithDelay: function (t, i) {
				this._delay(this.openTooltipDelayed, this, this.showDelay, t, i);
		},
		closeTooltipDelayed: function () {
				if (this._tooltip) {
					 this._tooltip._close();
					 if (this._tooltip.options.interactive && this._tooltip._container) {
						removeClass(this._tooltip._container, 'leaflet-clickable');
						this.removeInteractiveTarget(this._tooltip._container);
					 }
				}
				return this;
		},
		closeTooltipWithDelay: function () {
				clearTimeout(this._timeout);
				this._delay(this.closeTooltipDelayed, this, this.hideDelay);
		},
		_delay: function (func, scope, delay, t, i) {
				var me = this;
				if (this._timeout) {
					 clearTimeout(this._timeout)
				}
				this._timeout = setTimeout(function () {
					 func.call(scope, t, i);
					 delete me._timeout
				}, delay)
		},
		_initTooltipInteractionsDelayed: function (remove$$1) {
				if (!remove$$1 && this._tooltipHandlersAdded) { return; }
				var onOff = remove$$1 ? 'off' : 'on',
					events = {
						 remove: this.closeTooltipWithDelay,
						 move: this._moveTooltip
					};
				if (!this._tooltip.options.permanent) {
					 events.mouseover = this._openTooltipDelayed;
					 events.mouseout = this.closeTooltipWithDelay;
					 events.click = this.closeTooltipWithDelay;
					 if (this._tooltip.options.sticky) {
						events.mousemove = this._moveTooltip;
					 }
					 if (L.touch) {
						events.click = this._openTooltipDelayed;
					 }
				} else {
					 events.add = this._openTooltipDelayed;
				}
				this[onOff](events);
				this._tooltipHandlersAdded = !remove$$1;
		}
	});
	}

// end of code block
};

